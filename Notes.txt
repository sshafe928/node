Advanced array methods
 - manipulating data is highly important
 - master arrays and methods and rejex
 - pivotal for websties databaese and web appllications

Mastering arrays
    -Ternaries 
        - like a mini if statement
        - {conditional ? truepath : falsepath}
    Spread operator
        -(...) 
        -will iterate through and add all values from an array-like object
        -spreads the elements(methods and properties) of an array
    Mapping arrays
        -when you have an array with several items that you want to break down the best way is .map()
        - .map() is an array method that will go through each items and do a thing
        - .map() returns a whole new array when its finished
        -other methods such as forEach() do not create new arrays and instead just paste content for the existing array
    Anatomy of .map()
        -the first part of a map method is a variable name that will represent each item from your array
        - this variable name should be named as the singular or the array
            - people -> person
            - books -> book
        - next you can destructure your item if you like, this is not required but makes setup easier
            -const {name, age, job, shirtColor, drink, pet} = person;
        -lastly you need to return the object bck to the map
            -return {...person, shirtColor: 'tye-dye'}

    .forEach()
        -doesnt return a new array, every modification effects the origional array
        you have 3 values to work with: value(item), index(position), array(whole)
        - the last export for a forEach loop is undefined this really messes with return loops
        - instead you can have a condiitonal that acts depending on the values returned
        - if a list is missing variables they get the definition of undefined, you can deal witht hem by ->
                -counting occurences
                -breaking up the array into smaller arrays
                -printing out every name that starts with an A


    .filter()
        -filter is how you can remove certain items from yuor array
        it will go throuhj each item and comapre them to a conditional that you set up, true gets added and false doesnt

    .(each)
    const numbers = [-1, -2,]
    console.log(
        number.every((num) => num > 100)
    )

    - checks to make sure that every value meets the conditional
    - returns a boolean

    .some()
    - similar to .every, it checks if some of them are true
    - as long as one is true it will return true


    .reduce
    - a method that adds to an output it finds the accumulation of numbers
    - this does nothing for non number values, this is very use ful for creating updates numbers of items
    - items in your cart, money raised by the class


    const array = [2,4,6,8,10]
    array.reduce((accumulator, currentValue,currentIndex, array) =>{
        return accumulator + currentValue
    }, 20)
    accumulator refers to total
    current value, is where it curretnyly is
    current index is the index of the value
    array gives yoyu the entirety of the array
    .reduce(total, current, index,arr) =>.....
    


Agile Development 
        - requirements
        - design
        - Development

- a specific from of development and is currently the most used version across the world
- as the name implies this is a form of development that is flexible so that it can be used for any project
- this form of development focuses very heavily on the user expiriemce and client collaboration

Individuals and Interactions
    - instead of focusing on the project and what needs to be done you can focus on the team and how they do it
    - if you have a happy team and they are all working together very well then the product will turn out better
    - this also goes with the client if you have a good relationship with the customer the project has a better chance for success


Working software
    - while testing and creating your project you should make it available to everyone
    - many older companies would spend their time cresting rendered images of the sote and typing up instrauctions on how to use the site
    - you should instead have it up so that people can see and use it while push out consisent updates.

Customer collaboration
    - by keeping constant communication with the client and customers you can ensure that you are creating what they want ot recieve and what will be best for the users
    - this will also avoid large changes or unfortunate miscommunications at the end of the project

Responding to changes
    - unlike other forms of desing, agile is based around the idea that at any point the entire project and scope can changes
    - peoples needs, modern design, software and the team you are working with change constantly and your project needs ot be able to change with that\


Agile principles
    1. your highest priority is to satisfy the customer throught early and continuous dlivery of valuable software
    2. welcome changing requirements even late in development. Agile processes harness change for the customer's competitive advantage
    3. Deliver working software frequenbtly from a couple of weeks to a couple of month and as needed.
    4. business people and developers must work together dailt throughout the project
    5. build projects around motivated individuals. give them the enviornment and support they need, and trust them to get the job done.
    6.The most efficient and effective method od conveying information to and within a development team is face-to-face conversation
    7. working software is the primary measure of progress
    8. agile processes promote sustainable development. The sopnsors dvelopers,adn users should be able to maintain a constant pace indefinitly
    9. continuous attention to technical ecellence and good design enhances agility.


1. Intro to Node js

    - node is an enviornment that allows us to run JS outside of the browser
    - built using chrom's V8 JS engine
    - node has a large and great community that is adding to the libraries available


differences from browser to node

    - there is no DOM
    - there is no window object to reference
    - this runs server side appllications
    - great for filesystem
    - they use commonJS so we dont need to worry about ES6 or browser compatability

    Installing NODEJS

    -    node is already installed on these computers
    -   if you are going to install this on your own computer you should use LTS. this is becasue it is the stable build w3hat will be updated when needed

    REPL& CLI
    
        - REPL(read eval print loop) - is a terminal command that lets us use node
        CLI(Command LIne Interface) - is the better way that we can use node


        Starting REPL
         - REPL i slike having a small IDE in your terminal you can create variables and call then in the terminal but this is very inefficient and just for playing around
         - to exit repl press ctrl + c

         CLI 
         - this is the version that runs js files and complies them for the terminal
         - if you type in 'node filename.js' the file will be compiled and run without the need for a browser engine

         clear - clears terminal
         Cd- change directory

         PS C:\Users\sshafe928\Documents\GitHub\Year-2-notes> cd Distro 
         -- gets yuo into Distro
        PS C:\Users\sshafe928\Documents\GitHub\Year-2-notes\Distro> cd ../
         -- gets you out of the Distro folder
        PS C:\Users\sshafe928\Documents\GitHub\Year-2-notes> cd Distro/Test
         -- gets you into test in the distro folder
        PS C:\Users\sshafe928\Documents\GitHub\Year-2-notes\Distro\Test> 


        systeminfo - shows you all info about the computerand stuff

        PS C:\Users\sshafe928\Documents\GitHub\Year-2-notes\Distro\Test> ping "www.freecodecamp.org"
        -- requesting information from the website or ip address, gives you the ip address and statistics or stuff like that

        mkdir - makes  a directory or folder

        PS C:\Users\sshafe928\Documents\GitHub\Year-2-notes\Distro\Test> echo My name is Sabrina Shafer > note.txt -- makes a txt file with my name is sab in it
        make any file you want

        PS C:\Users\sshafe928\Documents\GitHub\Year-2-notes\Distro\Test> del note.txt --- delets note.txt

    globals
        -just like JS there are several global variables that we are able to use anywhere
        -for instance 'console' we dont need to define this, node already n=knows
        -we call these Globals

        a few globals:

        __dirname 
                - path to current directory
        __filename
                - the current file name
        require
                - alows us to use modules
        module
                - info about the current module
        process
                - info about the env where the program is being executed

    modules
        -modules are Node's way of saying files, EVERY . JS FILE IS A module
        - we can use these in ES6 but we use the import Command
        node uses 'require' instead of import 


    OS module
        - the os module is used to return information on the computer and system information on the PC 
            -const os = require('os')

    Path module
     - the path module is used for a navigating the directions and fie paths
      - this also includes mehtods that will clean up paths to avioud errors
        - const path = require('paths')


rs and enter restarts nodemon when it doenst notice a change


FS module (files system)

    -the file system module is extensive and allows interaction between your code and the files on the PC
    - this has methods to allow reading, writing, cleaning, and combining files (and so much more)
    - becasue it is so extensive we only import what we need
        -   const{ readFileSync, writeFileSync} = require('fs')

HTTP module
    - http is all about servers and internet protocol
    - this library truncates a lot of difficult code into simpiler methods and never buffers requests or response, allowing users to stream data
        -   const http = require('http')

    async - allows for multiple processes at once 
    sync needs to complete its process before the other code continues


    flags:
            'a': Open file for appending. The file is created if it does not exist.

            'ax': Like 'a' but fails if the path exists.

            'a+': Open file for reading and appending. The file is created if it does not exist.

            'ax+': Like 'a+' but fails if the path exists.

            'as': Open file for appending in synchronous mode. The file is created if it does not exist.

            'as+': Open file for reading and appending in synchronous mode. The file is created if it does not exist.

            'r': Open file for reading. An exception occurs if the file does not exist.

            'rs': Open file for reading in synchronous mode. An exception occurs if the file does not exist.

            'r+': Open file for reading and writing. An exception occurs if the file does not exist.

            'rs+': Open file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache.

            This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.

            This doesn't turn fs.open() or fsPromises.open() into a synchronous blocking call. If synchronous operation is desired, something like fs.openSync() should be used.

            'w': Open file for writing. The file is created (if it does not exist) or truncated (if it exists).

            'wx': Like 'w' but fails if the path exists.

            'w+': Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).

            'wx+': Like 'w+' but fails if the path exists.



Nodemon 
    - nodemon is a dev dependency that we use to help with node server development
    - if you ever uodate any files on a server than you need to stop and resart the server to load those settings
    - nodemon lets us do it automatically

Dev dependencies
    -   nodemon is a library that is not needed for the end user so loading it on the server would waste space for no reason
    - dependencies only used for creating an application is a dev dependency
    - to install dependencies into the dev only space we use dev dependencies
        -npm i nodemon -d

    NPM scripts
        - if you look into your package.json you will also see a scripts object
        - we have been using this in react without even knowing it you may recognize the commands lsted
            -"start" : "react-scripts start"
            -"build" : "CI= react-scripts build"
            -"test": "react-scripts test"
            -"eject": "react-scripts eject"

    custon scripts
        -react builds default scripts that we have been using but you are able to define your own scripts
        - lets make one for nodemon
    
    Asynchronous vs synchronous 
        - Asynchronous is a non-blocking architecture, so the exectuion of one task isnt dependant on another. Tasks can run simultaniously.
        =Synchrounous is a blocking architecture so the execution of each operation depends on completting the one before it. each task requires
         an answer before moving on to the next iteration

        event loop

            - the event loop is a key part of how the browser works with async functions and callbacks
            - its very hard to explain all this but some guy named philip roberts does a great job


Hypertext Transfer protocol
    -   http is how we send information from a browser od url to a server
    -   http is typical way that users ask for information from a server and that is called a requesting

http module
    -   node is excellent at server setup and request handelling, this is done through http module
    -   here we have methods like http.createServer() that allows us to easily create a new server


createServer

    -   http.createServer() takes in a call back function with 2 parameters, 1 for requests and 1 for responce

    const server = http.createServer((req,res)=> {})


    Req and Responding

    -   req is an object that represents the http request, typically done throught the url but also through things like fetch()
    - res is the responce, or what the server retunrs to the user


The request object

    -   there is a lot of information stored in the request object, including url, header, and parameters
    -    we are going to start with the url to get the location of the pae we are querying

    - if (req.url === "/") {}

The response object 

    -   the reponse object has a ton of information as well, including formst, json, and download
    -    we are going to focus on the required one called .end that ends the responce process

    res.end('welcome to our home page')
    else {res.status(404).end(); }

Promises

- Promises are special object that holds information about the values recieved but also whether or not the operation is finished
-Like chained anonomous functions, they 
- promises are asynchronous so we can use them to run the code and then we can force the rest of the code to wait on the promise
- You can create multiple promises, the first result from the first promise will automatically be given to the next promise.

-Async / Await are a way that we can use promises

- await is a keyword telling us that we need to wait for the promise to finish and return information

not everything has a promise on it, fetch statements is a promise by default but things like large math problems are not promises
promises are objects so we set them up like any other object

const getText = (path) => {
    return new Promise((resolve, reject) => {})
}

Promises have always been very important for JS and other languages

- we are going to see 3 ways to handle promises but please only use async / await in the future\



Events

- events are triggered by the user input, just like js or html events like onClick()
- node usues events very often building modules that handles changes on the page
- in node events are built off of a singular module called the event emitter
- this module takes in some kind of request and gives back something depending on the parameters
- the common events are requests and we use a method called .on for that
- any other module that extends events is also available to use the .on for example the http servers

File system flags
- when creating files sequentially we need to tell node how we want the data exported, i.e. overwrite, append, create, only if it doesnt exist 
common flags include, w, r, and a


Streams

- you have likley heard of streaming tv
- streams in NodeJS enabling efficeint data handeling by reading or writing inout and output sequentially
- we only load 64 kbps of information at a time so that we can enjoy the loaded part while the rest is loading
- just like fs option with flGS, there are options with streaming as well. two highly use options are:
- highWaterMark
    -   tells the stream how many bytes ahould be in each chunk
-encoding
    -   defines the language, utf8 for example


servers
    servers are computers, i know they sound more advanced and technical, but they are a computer just like your laop top
    the only difference is that a server is meant to stay on and alwyas have the resources they are carrying available

http request cycle

-urls are an address to the server where the inform,ation is stored
-think of it like a house and you need to send a letter to ask for something, you cant do that withiut knowing the address
-the url holds a lot of information, where to go and what to ask for
-the server waits for this http request and then http responds with the corresponding data if available


a reponce has 4 parts:
    -a method
        -GET(reads Data) PUT(updates data) POST(creates data) DELETE(deletes data)
    -a url 
        -the address
    -headers
        -the options that your request carries
    -body
        -any other releveant informaiton needed

Headers (optional)

    -headers is an obkect that is filled with key value pairs describing the request
    -for ex:
        -CORS: no-CORS
        -Referrer: google.com
        -Pragma: no-cache

Body or Payload
    -this is the content that you are depositing on to the server if you are running a PUT or POST request
    -this is totally optional and the users cant do this with a url request
    

Status codes:
    -200, 404 -- tells the user the status

Status text:
    -describes the code, OK or Page not found

Headers:
    -details about the data and server

body:
    -the content they want, html json....



Server status code:
    -100's (informaiton)
        -this si a preliminary responce, typcallly used to let the client know that thier request was recieved and to wait

    -200's (success)
        -this is a success, there are a lot of codes in the 20 but all of them anre just different sucesses

    -300's(redirect)
        -these are a redirection, this is typically placed in the console for thr dev to handle deprications
    -400's (client errors)
        -this is used when the error seems to be caused by the cloent and not the server

    -500's (server error)
        -these are reserved for when somethng goes wrong in the server's code, infinite loops, missing methids..
